version: '3.9'

services:
  db_primary:
    image: postgres:13
    env_file:
      - .env
    environment:
      POSTGRES_DB: ${POSTGRES_DB_PRIMARY}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    ports:
      - "5432:5432"
    volumes:
      - ./postgresql.conf:/etc/postgresql/postgresql.conf  # Подключаем кастомный postgresql.conf
      - ./pg_hba.conf:/etc/postgresql/pg_hba.conf
      - db_primary_data:/var/lib/postgresql/data
      - ./init.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - db_network
    command: postgres -c config_file=/etc/postgresql/postgresql.conf
  db_replica:
    image: postgres:13
    env_file:
      - .env
    environment:
      POSTGRES_DB: ${POSTGRES_DB_REPLICA}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_PRIMARY_HOST: ${POSTGRES_HOST_REPLICA}
      POSTGRES_PRIMARY_PORT: ${POSTGRES_PORT_REPLICA}
    depends_on:
      - db_primary
    volumes:
      - ./postgresql.conf:/etc/postgresql/postgresql.conf  # Подключаем кастомный postgresql.conf
      - ./pg_hba.conf:/etc/postgresql/pg_hba.conf
      - db_replica_data:/var/lib/postgresql/data
      - ./init.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - db_network
    command: postgres -c config_file=/etc/postgresql/postgresql.conf
  db_replica2:
    image: postgres:13
    env_file:
      - .env
    environment:
      POSTGRES_DB: ${POSTGRES_DB_REPLICA2}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_PRIMARY_HOST: ${POSTGRES_HOST_REPLICA2}
      POSTGRES_PRIMARY_PORT: ${POSTGRES_PORT_REPLICA2}
    depends_on:
      - db_primary
    volumes:
      - ./postgresql.conf:/etc/postgresql/postgresql.conf
      - ./pg_hba.conf:/etc/postgresql/pg_hba.conf
      - db_replica2_data:/var/lib/postgresql/data
      - ./init.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - db_network
    command: postgres -c config_file=/etc/postgresql/postgresql.conf
  postgres_exporter:
    image: prometheuscommunity/postgres-exporter
    env_file:
      - .env
    environment:
      DATA_SOURCE_NAME: "postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@db_primary:5432/${POSTGRES_DB_PRIMARY}?sslmode=disable"
    ports:
      - "9187:9187"
    networks:
      - db_network
    depends_on:
      - db_primary
      - db_replica
      - db_replica2
  web1:
    build:
      context: .
      dockerfile: Dockerfile
    env_file:
      - .env
    volumes:
      - .:/app
    ports:
      - "8001:8000"
    depends_on:
      - db_primary
      - db_replica
      - db_replica2
    networks:
      - db_network

  web2:
    build:
      context: .
      dockerfile: Dockerfile
    env_file:
      - .env
    volumes:
      - .:/app
    ports:
      - "8002:8000"
    depends_on:
      - db_primary
      - db_replica
      - db_replica2
    networks:
      - db_network

  web3:
    build:
      context: .
      dockerfile: Dockerfile
    env_file:
      - .env
    volumes:
      - .:/app
    ports:
      - "8003:8000"
    depends_on:
      - db_primary
      - db_replica
      - db_replica2
    networks:
      - db_network
  nginx:
    build:
      context: .
      dockerfile: Dockerfile.nginx
    container_name: nginx_assigment3
    ports:
      - "80:80"
    depends_on:
      - web1
      - web2
      - web3
      - prometheus
    networks:
      - db_network

  prometheus:
    image: prom/prometheus
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
    ports:
      - "9090:9090"
    networks:
      - db_network
  grafana:
    image: grafana/grafana
    ports:
      - "3000:3000"
    depends_on:
      - prometheus
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
    volumes:
      - grafana_data:/var/lib/grafana
    networks:
      - db_network

volumes:
  db_primary_data:
  db_replica_data:
  db_replica2_data:
  grafana_data:
networks:
  db_network:
    driver: bridge